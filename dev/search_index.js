var documenterSearchIndex = {"docs":
[{"location":"manual/2.performance/#Performance","page":"Performance","title":"Performance","text":"","category":"section"},{"location":"manual/2.performance/","page":"Performance","title":"Performance","text":"We will give a few examples the illustrate the performance of the collection.","category":"page"},{"location":"manual/2.performance/#Linear-Algebra-Properties-of-Typed-Matrices","page":"Performance","title":"Linear Algebra Properties of Typed Matrices","text":"","category":"section"},{"location":"manual/2.performance/","page":"Performance","title":"Performance","text":"LinearAlgebra.jl provides several linear algebra operations. By utilizing the Julia type system, we can improve the performance of some of these operations for special matrices. The default method for the issymmetric function, for example, checks that a matrix satisfies the definition of symmetry by accessing each matrix element. The matrix Minij is known to be symmetric, and TypedMatrices.jl defines a new method for issymmetric that simply returns true.","category":"page"},{"location":"manual/2.performance/","page":"Performance","title":"Performance","text":"On the Minij matrix of order 1000 this specialised method is over 80,000 times faster than the default implementations in the median case.","category":"page"},{"location":"manual/2.performance/","page":"Performance","title":"Performance","text":"julia> a = Minij(1000)\n1000×1000 Minij{Int64}:\n...\n\njulia> b = Matrix(Minij(1000))\n1000×1000 Matrix{Int64}:\n...\n\njulia> @benchmark issymmetric(a)\nBenchmarkTools.Trial: 10000 samples with 999 evaluations.\n Range (min … max):   9.810 ns … 89.790 ns  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     10.310 ns              ┊ GC (median):    0.00%\n Time  (mean ± σ):   10.798 ns ±  2.083 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  █▅▇▅▆▆▃▄▄▂ ▃▂▁▃ ▁▂▁▂▂▂▁▁▂ ▁                                 ▂\n  ███████████████████████████▇▆▇▇▇▆▆▄▆▃▄▆▄▄▅▃▅▅▅▄▆▄▄▅▄▄▅▅▄▅▂▅ █\n  9.81 ns      Histogram: log(frequency) by time      17.7 ns <\n\n Memory estimate: 0 bytes, allocs estimate: 0.\n\njulia> @benchmark issymmetric(b)\nBenchmarkTools.Trial: 4883 samples with 1 evaluation.\n Range (min … max):  593.700 μs …  13.507 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     873.400 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):     1.009 ms ± 515.315 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n    █▂   ▁▁\n  ▂▆██▇▆████▇▅▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ▂\n  594 μs           Histogram: frequency by time         2.69 ms <\n\n Memory estimate: 0 bytes, allocs estimate: 0.","category":"page"},{"location":"manual/2.performance/#Known-Algorithm-Working-on-Hilbert","page":"Performance","title":"Known Algorithm Working on Hilbert","text":"","category":"section"},{"location":"manual/2.performance/","page":"Performance","title":"Performance","text":"The following example shows a known algorithm that works on Hilbert matrices. The variable a is of type Hilbert, whereas b is a variable of type Matrix representing the same matrix. Computing the determinant of b is 280 times slower and requires almost 1,000 times more memory than computing that of a.","category":"page"},{"location":"manual/2.performance/","page":"Performance","title":"Performance","text":"julia> a = Hilbert{BigFloat}(100)\n100×100 Hilbert{BigFloat}:\n...\n\njulia> b = Matrix(Hilbert{BigFloat}(100))\n100×100 Matrix{BigFloat}:\n...\n\njulia> t3 = @benchmark det(a)\nBenchmarkTools.Trial: 6985 samples with 1 evaluation.\n Range (min … max):  334.500 μs … 740.291 ms  ┊ GC (min … max):  0.00% … 68.80%\n Time  (median):     564.100 μs               ┊ GC (median):     0.00%\n Time  (mean ± σ):   706.671 μs ±   8.853 ms  ┊ GC (mean ± σ):  10.32% ±  0.82%\n\n   ▅█▅▂▂▅▄▁\n  ▃█████████▇▆▆▄▄▄▄▅▅▅▅▆▆▇███▇▆▇▅▅▄▅▅▄▃▃▃▃▃▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁ ▃\n  334 μs           Histogram: frequency by time         1.23 ms <\n\n Memory estimate: 69.02 KiB, allocs estimate: 3233.\n\njulia> t4 = @benchmark det(b)\nBenchmarkTools.Trial: 32 samples with 1 evaluation.\n Range (min … max):  127.925 ms … 229.261 ms  ┊ GC (min … max): 8.86% … 4.76%\n Time  (median):     158.327 ms               ┊ GC (median):    9.49%\n Time  (mean ± σ):   160.932 ms ±  23.576 ms  ┊ GC (mean ± σ):  9.48% ± 3.52%\n\n      ▃▃ █ ▃         ▃█\n  ▇▁▁▁██▁█▁█▁▇▇▇▁▇▇▇▇██▁▁▁▁▇▇▇▁▁▇▇▁▇▁▁▁▁▇▁▁▁▁▁▁▇▁▁▇▁▁▁▁▁▁▁▁▁▁▁▇ ▁\n  128 ms           Histogram: frequency by time          229 ms <\n\n Memory estimate: 66.22 MiB, allocs estimate: 1333851.","category":"page"},{"location":"manual/2.performance/#Trade-off-between-Performance-and-Memory","page":"Performance","title":"Trade-off between Performance and Memory","text":"","category":"section"},{"location":"manual/2.performance/","page":"Performance","title":"Performance","text":"For algorithms not implemented in TypedMatrices.jl, the package trades performance off for—potentially substantial—memory savings. For example, generating the variable a, which is of type Cauchy, only requires 63.229 μs and 114.16 KiB of memory, while generating b, which is the same matrix but has type Matrix, requires 3.862 ms and 7.74 MiB of memory. And once generated, storing b requires 500,000 times more memory than storing a.","category":"page"},{"location":"manual/2.performance/","page":"Performance","title":"Performance","text":"julia> @benchmark a = Cauchy{Float64}(1000)\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  27.100 μs … 191.819 ms  ┊ GC (min … max):  0.00% … 99.94%\n Time  (median):     32.100 μs               ┊ GC (median):     0.00%\n Time  (mean ± σ):   63.229 μs ±   1.919 ms  ┊ GC (mean ± σ):  35.05% ±  4.29%\n\n  ▅█▇▅▄▃▃▂▂▃▂▃▃▅▅▃▁▁                 ▁▁                        ▂\n  ███████████████████▇▇███▇▇▆▇▇▇▇▆▆▇████▇▇▆▆▄▄▃▂▂▄▅▅▅▆▆▇▇▆▆▇▅▅ █\n  27.1 μs       Histogram: log(frequency) by time       125 μs <\n\n Memory estimate: 114.16 KiB, allocs estimate: 36.\n\njulia> @benchmark b = Matrix(Cauchy{Float64}(1000))\nBenchmarkTools.Trial: 1288 samples with 1 evaluation.\n Range (min … max):  2.413 ms … 18.386 ms  ┊ GC (min … max):  0.00% … 48.63%\n Time  (median):     3.271 ms              ┊ GC (median):     0.00%\n Time  (mean ± σ):   3.862 ms ±  1.674 ms  ┊ GC (mean ± σ):  15.96% ± 19.84%\n\n  ▂█▄   ▁▂\n  ████▄▆██▆▅▅▅▃▃▃▃▄▄▄▃▃▃▃▃▃▃▃▃▃▃▃▂▂▂▂▃▃▃▃▃▂▂▂▂▂▃▂▁▂▂▁▂▂▂▂▂▂▂ ▃\n  2.41 ms        Histogram: frequency by time        9.53 ms <\n\n Memory estimate: 7.74 MiB, allocs estimate: 38.\n\njulia> Base.summarysize(a)\n16\n\njulia> Base.summarysize(b)\n8000040","category":"page"},{"location":"manual/2.performance/","page":"Performance","title":"Performance","text":"On the other hand, accessing an element of a requires computation, whereas those of b have been pre-computed and are already available in memory. This implies a performance penalty, which is not unexpected. In view of this trade-off, however, one can use extremely large matrices on machines with a moderate amount of memory, which allows users to tackle otherwise intractably large problems. This is especially true for algorithms that only need to access a subset of the matrix elements.","category":"page"},{"location":"manual/2.performance/","page":"Performance","title":"Performance","text":"julia> @benchmark det(a)\nBenchmarkTools.Trial: 111 samples with 1 evaluation.\n Range (min … max):  20.537 ms … 353.410 ms  ┊ GC (min … max): 0.00% … 90.93%\n Time  (median):     34.151 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   45.104 ms ±  42.894 ms  ┊ GC (mean ± σ):  7.81% ±  9.53%\n\n   ▄█▅▃ ▁\n  ▅████▇█▁▆▅▁▁▁▅▅▁▁▅▁▁▅▁▁▁▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▅ ▅\n  20.5 ms       Histogram: log(frequency) by time       301 ms <\n\n Memory estimate: 7.64 MiB, allocs estimate: 4.\n\njulia> @benchmark det(b)\nBenchmarkTools.Trial: 175 samples with 1 evaluation.\n Range (min … max):  18.639 ms … 314.529 ms  ┊ GC (min … max): 0.00% … 91.89%\n Time  (median):     26.317 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   28.670 ms ±  22.610 ms  ┊ GC (mean ± σ):  7.81% ±  8.48%\n\n      ▂ ▂▂ ██  ▂▂ ▃   ▅ ▅▂ ▃▂\n  ▅▁▃▇█▇██████▆██▅█▅█▅███████▇▆▁▁▆▆▃▁▆▅▅▅▁▁▁▁▁▁▁▃▅▃▁▁▅▁▁▁▁▃▃▁▃ ▃\n  18.6 ms         Histogram: frequency by time         44.1 ms <\n\n Memory estimate: 7.64 MiB, allocs estimate: 4.\n\njulia> @benchmark sum(a)\nBenchmarkTools.Trial: 3104 samples with 1 evaluation.\n Range (min … max):  1.124 ms …   7.772 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     1.400 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   1.604 ms ± 579.750 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  █▃▁█▄ ▂\n  █████▇██▇█▆▃▄▄▃▄▃▄▃▄▃▃▃▃▃▃▃▂▃▃▂▂▂▂▂▂▃▃▂▃▂▂▃▃▃▂▃▂▂▂▂▂▂▂▂▂▂▁▂ ▃\n  1.12 ms         Histogram: frequency by time        3.56 ms <\n\n Memory estimate: 16 bytes, allocs estimate: 1.\n\njulia> @benchmark sum(b)\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  243.900 μs …  2.106 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     329.800 μs              ┊ GC (median):    0.00%\n Time  (mean ± σ):   355.504 μs ± 91.684 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n      ▂▅█▇▅▃▃▂▁▁▁▁\n  ▁▄██████████████▇▆▆▆▆▆▆▆▄▄▄▄▄▄▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁ ▃\n  244 μs          Histogram: frequency by time          647 μs <\n\n Memory estimate: 16 bytes, allocs estimate: 1.","category":"page"},{"location":"references/3.properties/#Properties","page":"Properties","title":"Properties","text":"","category":"section"},{"location":"references/3.properties/","page":"Properties","title":"Properties","text":"Some documentation of the following properties are adapted from MatrixDepot.jl.","category":"page"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.AbstractProperty","page":"Properties","title":"TypedMatrices.PropertyTypes.AbstractProperty","text":"This is an abstract type for properties.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Bidiagonal","page":"Properties","title":"TypedMatrices.PropertyTypes.Bidiagonal","text":"The matrix is upper or lower bidiagonal.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Binary","page":"Properties","title":"TypedMatrices.PropertyTypes.Binary","text":"The matrix has entries from a binary set.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Circulant","page":"Properties","title":"TypedMatrices.PropertyTypes.Circulant","text":"The matrix is circulant.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Complex","page":"Properties","title":"TypedMatrices.PropertyTypes.Complex","text":"The matrix has complex entries.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Correlation","page":"Properties","title":"TypedMatrices.PropertyTypes.Correlation","text":"The matrix is a correlation matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Defective","page":"Properties","title":"TypedMatrices.PropertyTypes.Defective","text":"The matrix is defective.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.DiagonallyDominant","page":"Properties","title":"TypedMatrices.PropertyTypes.DiagonallyDominant","text":"The matrix is diagonally dominant.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Eigensystem","page":"Properties","title":"TypedMatrices.PropertyTypes.Eigensystem","text":"Part of the eigensystem of the matrix is explicitly known.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.FixedSize","page":"Properties","title":"TypedMatrices.PropertyTypes.FixedSize","text":"The matrix is only available in some fixed sizes.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Graph","page":"Properties","title":"TypedMatrices.PropertyTypes.Graph","text":"The matrix is the adjacency matrix of a graph.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Hankel","page":"Properties","title":"TypedMatrices.PropertyTypes.Hankel","text":"The matrix is a Hankel matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Hessenberg","page":"Properties","title":"TypedMatrices.PropertyTypes.Hessenberg","text":"The matrix is an upper or lower Hessenberg matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.IllConditioned","page":"Properties","title":"TypedMatrices.PropertyTypes.IllConditioned","text":"The matrix is ill-conditioned for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Indefinite","page":"Properties","title":"TypedMatrices.PropertyTypes.Indefinite","text":"The matrix is indefinite for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.InfinitelyDivisible","page":"Properties","title":"TypedMatrices.PropertyTypes.InfinitelyDivisible","text":"The matrix is infinitely divisible.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Integer","page":"Properties","title":"TypedMatrices.PropertyTypes.Integer","text":"The matrix has integer entries.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Inverse","page":"Properties","title":"TypedMatrices.PropertyTypes.Inverse","text":"The inverse of the matrix is known explicitly.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Involutory","page":"Properties","title":"TypedMatrices.PropertyTypes.Involutory","text":"The matrix is involutory for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Nilpotent","page":"Properties","title":"TypedMatrices.PropertyTypes.Nilpotent","text":"The matrix is nilpotent for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Nonnegative","page":"Properties","title":"TypedMatrices.PropertyTypes.Nonnegative","text":"The matrix is nonnegative for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Normal","page":"Properties","title":"TypedMatrices.PropertyTypes.Normal","text":"The matrix is normal.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Orthogonal","page":"Properties","title":"TypedMatrices.PropertyTypes.Orthogonal","text":"The matrix is orthogonal for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Positive","page":"Properties","title":"TypedMatrices.PropertyTypes.Positive","text":"The matrix is positive for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.PositiveDefinite","page":"Properties","title":"TypedMatrices.PropertyTypes.PositiveDefinite","text":"The matrix is positive definite for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Random","page":"Properties","title":"TypedMatrices.PropertyTypes.Random","text":"The matrix has random entries.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.RankDeficient","page":"Properties","title":"TypedMatrices.PropertyTypes.RankDeficient","text":"The matrix is rank deficient.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Rectangular","page":"Properties","title":"TypedMatrices.PropertyTypes.Rectangular","text":"The matrix is rectangular for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.RegularisationProblem","page":"Properties","title":"TypedMatrices.PropertyTypes.RegularisationProblem","text":"The output is a test problem for regularization methods.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.SingularValues","page":"Properties","title":"TypedMatrices.PropertyTypes.SingularValues","text":"Part of the singular values and vectors of the matrix is explicitly known.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Sparse","page":"Properties","title":"TypedMatrices.PropertyTypes.Sparse","text":"The matrix is sparse.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Symmetric","page":"Properties","title":"TypedMatrices.PropertyTypes.Symmetric","text":"The matrix is symmetric for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Triangular","page":"Properties","title":"TypedMatrices.PropertyTypes.Triangular","text":"The matrix is upper or lower trinagular.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Tridiagonal","page":"Properties","title":"TypedMatrices.PropertyTypes.Tridiagonal","text":"The matrix is tridiagonal.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Toeplitz","page":"Properties","title":"TypedMatrices.PropertyTypes.Toeplitz","text":"The matrix is Toeplitz.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.TotallyNonnegative","page":"Properties","title":"TypedMatrices.PropertyTypes.TotallyNonnegative","text":"The matrix is totally nonnegative for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.TotallyPositive","page":"Properties","title":"TypedMatrices.PropertyTypes.TotallyPositive","text":"The matrix is totally positive for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/3.properties/#TypedMatrices.PropertyTypes.Unimodular","page":"Properties","title":"TypedMatrices.PropertyTypes.Unimodular","text":"The matrix is unimodular for some parameter values.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#Builtin-Matrices","page":"Builtin Matrices","title":"Builtin Matrices","text":"","category":"section"},{"location":"references/4.builtin-matrices/#TypedMatrices.Binomial","page":"Builtin Matrices","title":"TypedMatrices.Binomial","text":"Binomial Matrix\n\nThe binomial matrix is a multiple of an involutory matrix.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nG. Boyd, C. A. Micchelli, G. Strang and D. X. Zhou, Binomial matrices, Adv. Comput. Math., 14 (2001), pp. 379-391, https://doi.org/10.1023/A:1012207124894.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Cauchy","page":"Builtin Matrices","title":"TypedMatrices.Cauchy","text":"Cauchy Matrix\n\nGiven two vectors x and y, the (i,j) entry of the Cauchy matrix is 1/(x[i]+y[j]).\n\nInput Options\n\nx, y: two vectors.\nx, y: two integers, as vectors 1:x and 1:y`.\nx: an integer, as vectors 1:xand1:x``.\nx: a vector. y defaults to x.\n\nReferences\n\nN. J. Higham, Accuracy and Stability of Numerical Algorithms, second edition, Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, 2002, https://doi.org/10.1137/1.9780898718027. See sect. 28.1.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.ChebSpec","page":"Builtin Matrices","title":"TypedMatrices.ChebSpec","text":"Chebyshev Spectral Differentiation Matrix\n\nThe Chebyshev Spectral Differentiation Matrix is used to approximate numerically the derivatives of a function evaluated at Chebyshev nodes.\n\nIf k = 0,the generated matrix is nilpotent and a vector with all one entries is a null vector. If k = 1, the generated matrix is nonsingular and well-conditioned. Its eigenvalues have negative real parts.\n\nInput Options\n\ndim, k: dim is the dimension of the matrix and k is either 0 or 1.\ndim: k=0.\n\nReferences\n\nL. N. Trefethen and M. R. Trummer, An instability phenomenon in spectral methods, SIAM J. Numer. Anal., 24 (1987), pp. 1008-1023, https://doi.org/10.1137/0724066.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Chow","page":"Builtin Matrices","title":"TypedMatrices.Chow","text":"Chow Matrix\n\nThe Chow matrix is a singular Toeplitz lower-Hessenberg matrix.\n\nInput Options\n\ndim, alpha, delta: dim is dimension of the matrix.           alpha, delta are scalars such that A[i,i] = alpha + delta and           A[i,j] = alpha^(i - j + 1) for j + 1 <= i.\ndim: alpha = 1, delta = 0.\n\nReferences\n\nT. S. Chow, A class of Hessenberg matrices with known eigenvalues and inverses, SIAM Rev., 11 (1969), pp. 391-395, https://doi.org/10.1137/1011065.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Circulant","page":"Builtin Matrices","title":"TypedMatrices.Circulant","text":"Circulant Matrix\n\nA circulant matrix has the property that each row is obtained by cyclically permuting the entries of the previous row one step forward.\n\nInput Options\n\nvec: a vector.\ndim: an integer, as vector 1:dim.\n\nReferences\n\nP. J. Davis, Circulant Matrices, John Wiley, 1977.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Clement","page":"Builtin Matrices","title":"TypedMatrices.Clement","text":"Clement Matrix\n\nThe Clement matrix is a tridiagonal matrix with zero diagonal entries. If k = 1, the matrix is symmetric.\n\nInput Options\n\ndim, k: dim is the dimension of the matrix.       If k = 0, the matrix is of type Tridiagonal.       If k = 1, the matrix is of type SymTridiagonal.\ndim: k = 0.\n\nReferences\n\nP. A. Clement, A class of triple-diagonal matrices for test purposes, SIAM Rev., 1 (1959), pp. 50-52, https://doi.org/10.1137/1001006.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Companion","page":"Builtin Matrices","title":"TypedMatrices.Companion","text":"Companion Matrix\n\nThe companion matrix to the monic polynomial\n\na(x) = a_0 + a_1x + ... + a_{n-1}x^{n-1} + x^n\n\nis the n-by-n matrix with ones on the first subdiagonal and the last column given by the coefficients of a(x).\n\nInput Options\n\nvec: vec is a vector of coefficients.\ndim: vec = [1:dim;]. dim is the dimension of the matrix.\npolynomial: polynomial is a polynomial. Last column will contain\n\nits coefficients.\n\nReferences\n\nN. J. Higham, What Is the Companion Matrix?, https://nhigham.com/2021/03/23/what-is-a-companion-matrix/\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Comparison","page":"Builtin Matrices","title":"TypedMatrices.Comparison","text":"Comparison Matrix\n\nThe comparison matrix of a given matrix.\n\nInput Options\n\nB, k: B is a matrix.   If k = 0, then C(i,j) = abs(B(i,j)) for i ≠ j and C(i,i) = -abs(B(i,i)).   If k = 1, then C(i,i) = abs(B(i,i)) and C(i,j) = -max(abs(B(i,:))) for i ≠ j.\nB: B is a matrix and k = 1.\n\nN. J. Higham, Efficient algorithms for computing the condition number of a tridiagonal matrix, SIAM J. Sci. Stat. Comput., 7 (1986), pp. 150-165, https://doi.org/10.1137/0907011.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Cycol","page":"Builtin Matrices","title":"TypedMatrices.Cycol","text":"Cycol Matrix\n\nThis matrix has columns that repeat cyclically.\n\nInput Options\n\nm, n, k: m and n are size of the matrix. The repeated columns are randn(m, k).\nn, k: n is size of the matrix. The repetition is randn(n, k).\nn: n is size of the matrix. k = round(n/4)\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.DingDong","page":"Builtin Matrices","title":"TypedMatrices.DingDong","text":"Dingdong Matrix\n\nThe Dingdong matrix is a Hankel matrix due to F. N. Ris of IBM Thomas J. Watson Research Centre. The eigenvalues cluster around π/2 and -π/2.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nJ. C. Nash, Compact Numerical Methods for Computers: Linear Algebra and Function Minimisation, second edition, Adam Hilger, Bristol, 1990 (Appendix 1).\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Dorr","page":"Builtin Matrices","title":"TypedMatrices.Dorr","text":"Dorr Matrix\n\nThe Dorr Matrix is a diagonally dominant, ill-conditioned, tridiagonal sparse matrix.\n\nInput Options\n\ndim, theta: dim is the dimension of the matrix and       theta is the parameter of the matrix.\ndim: theta = 0.01.\n\nReferences\n\nF. W. Dorr, An example of ill-conditioning in the numerical solution of singular perturbation problems, Math. Comp., 25 (1971), pp. 271-283, https://doi.org/10.1090/S0025-5718-1971-0297142-0.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Dramadah","page":"Builtin Matrices","title":"TypedMatrices.Dramadah","text":"Dramadah Matrix\n\nThe Dramadah matrix is a matrix of 0s and 1s whose inverse has comparatively large Frobenius norm.\n\nInput Options\n\ndim, k: the dimension of the matrix and k.   k = 1 abs(det(A)) = 1, the inverse has integer entries.   k = 2 the inverse has integer entries.   k = 3 det(A) is equal to nth Fibonacci number.\ndim: k = 1.\n\nReferences\n\nR.L. Graham and N.J.A. Sloane, Anti-Hadamard matrices,  Linear Algebra and Appl., 62 (1984), pp. 113-137. https://doi.org/10.1016/0024-3795(84)90090-9\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Fiedler","page":"Builtin Matrices","title":"TypedMatrices.Fiedler","text":"Fiedler Matrix\n\nThe Fiedler matrix has exactly one positive eigenvalue, the dominant one. All the other eigenvalues are negative.\n\nInput Options\n\nvec: a vector.\ndim: dim is the dimension of the matrix. vec=[1:dim;].\n\nReferences\n\nA. C. Schaeffer and G. Szegö, Solution to problem 3705, Amer. Math. Monthly, 43 (1936), pp. 246-259, https://doi.org/10.1090/S0002-9947-1941-0005164-7.\n\nJ. Todd, Basic Numerical Mathematics, Vol. 2: Numerical Algebra, Birkhauser, Basel, and Academic Press, New York, 1977, p. 159.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Forsythe","page":"Builtin Matrices","title":"TypedMatrices.Forsythe","text":"Forsythe Matrix\n\nThe Forsythe matrix is an n-by-n perturbed Jordan block. This generator is adapted from N. J. Higham's Test Matrix Toolbox.\n\nInput Options\n\ndim, alpha, lambda: dim is the dimension of the matrix.   alpha and lambda are scalars.\ndim: alpha = sqrt(eps(type)) and lambda = 0.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Frank","page":"Builtin Matrices","title":"TypedMatrices.Frank","text":"Frank Matrix\n\nThe Frank matrix is an upper Hessenberg matrix with determinant 1. The eigenvalues are real, positive, and very ill conditioned.\n\nInput Options\n\ndim, k: dim is the dimension of the matrix, k = 0 or 1.   If k = 1 the matrix reflect about the anti-diagonal.\ndim: the dimension of the matrix.\n\nReferences\n\nW. L. Frank, Computing eigenvalues of complex matrices by determinant evaluation and by methods of Danilewski and Wielandt, J. Soc. Indust. Appl. Math., 6 (1958), pp. 378-392, https://doi.org/10.1137/0106026. See pp. 385 and 388.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.GCDMat","page":"Builtin Matrices","title":"TypedMatrices.GCDMat","text":"GCDMat Matrix\n\nA matrix whose (i,j) entry is gcd(i,j). It is a symmetric positive definite matrix.\n\nInput Options\n\ndim: the dimension of the matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.GearMat","page":"Builtin Matrices","title":"TypedMatrices.GearMat","text":"Gear Matrix\n\nThe Gear matrix has ones on the first subdiagonal and superdiagonal, and has two additional entries of value ±1. Given the two integers -n ≤ i ≤ n and -n ≤ j ≤ n, the matrix has the elements  sign(i) in position (1, abs(i)) and sign(j) in position (n, n+1-abs(j)). The other elements are zeros.\n\nInput Options\n\ndim, i, j: the dimension of the matrix and the position of the 1s.\ndim: the dimension of the matrix. i = n and j = -n by default.\n\nReferences\n\nC. W. Gear, A simple set of test matrices for eigenvalue programs, Math. Comp., 23 (1969), pp. 119-125, https://doi.org/10.1090/S0025-5718-1969-0238477-8.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Golub","page":"Builtin Matrices","title":"TypedMatrices.Golub","text":"Golub Matrix\n\nThe Golub matrix is the product of two random matrices, the first is unit lower triangular and the second is upper triangular. The LU factorization without pivoting fails to reveal that such matrices are badly conditioned.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nD. Viswanath and N. Trefethen. Condition numbers of random triangular matrices, SIAM J. Matrix Anal. Appl., 19 (1998), 564-581, https://doi.org/10.1137/S0895479896312869.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Grcar","page":"Builtin Matrices","title":"TypedMatrices.Grcar","text":"Grcar Matrix\n\nThe Grcar matrix is a Toeplitz matrix with sensitive eigenvalues.\n\nInput Options\n\ndim, k: dim is the dimension of the matrix and   k is the number of superdiagonals.\ndim: the dimension of the matrix.\n\nReferences\n\nJ. F. Grcar, Operator coefficient methods for linear equations, Report SAND89-8691, Sandia National Laboratories, Albuquerque, New Mexico, 1989 (Appendix 2).\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Hadamard","page":"Builtin Matrices","title":"TypedMatrices.Hadamard","text":"Hadamard Matrix\n\nThe Hadamard matrix is a square matrix of order a power of 2, whose entries are 1 or –1. It was named after Jacques Hadamard. The rows of a Hadamard matrix are orthogonal.\n\nInput Options\n\ndim: the dimension of the matrix, dim is a power of 2.\n\nReferences\n\nS. W. Golomb and L. D. Baumert, The search for Hadamard matrices, Amer. Math. Monthly, 70 (1963) pp. 12-17, https://doi.org/10.1080/00029890.1963.11990035.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Hankel","page":"Builtin Matrices","title":"TypedMatrices.Hankel","text":"Hankel Matrix\n\nA Hankel matrix is constant across the anti-diagonals. It is symmetric.\n\nInput Options\n\nvc, vr: vc and vc are the first column and last row of the      matrix. If the last element of vc differs from the first element               of vr, the last element of rc prevails.\nv: a vector, as vc = v and vr will be zeros.\ndim: dim is the dimension of the matrix. v = [1:dim;].\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Hanowa","page":"Builtin Matrices","title":"TypedMatrices.Hanowa","text":"Hanowa Matrix\n\nThe Hanowa matrix is a matrix whose eigenvalues lie on a vertical line in the complex plane.\n\nInput Options\n\ndim: the dimension of the matrix and alpha = -1.\ndim, alpha: the dimension and alpha.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Hilbert","page":"Builtin Matrices","title":"TypedMatrices.Hilbert","text":"Hilbert Matrix\n\nThe Hilbert matrix has (i,j) element 1/(i+j-1). It is notorious for being ill conditioned. It is symmetric positive definite and totally positive.\n\nSee also InverseHilbert.\n\nInput Options\n\ndim: the dimension of the matrix.\nrow_dim, col_dim: the row and column dimensions.\n\nReferences\n\nM. D. Choi, Tricks or treats with the Hilbert matrix, Amer. Math. Monthly, 90 (1983), pp. 301-312, https://doi.org/10.1080/00029890.1983.11971218.\n\nN. J. Higham, Accuracy and Stability of Numerical Algorithms, second edition, Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, 2002. See sect. 28.1.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.InverseHilbert","page":"Builtin Matrices","title":"TypedMatrices.InverseHilbert","text":"Inverse of the Hilbert Matrix\n\nThis is the inverse of the Hilbert matrix.\n\nSee also Hilbert.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nM. D. Choi, Tricks or treats with the Hilbert matrix, Amer. Math. Monthly, 90 (1983), pp. 301-312, https://doi.org/10.1080/00029890.1983.11971218.\n\nN. J. Higham, Accuracy and Stability of Numerical Algorithms, second edition, Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, 2002. See sect. 28.1.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Invhess","page":"Builtin Matrices","title":"TypedMatrices.Invhess","text":"Invhess Matrix\n\nThis matrix is thenverse of an upper Hessenberg matrix.\n\nInput Options\n\ndim: the dimension of the matrix. x = [1:dim;].\nx: x vector. y = -x[1:end-1].\nx, y: x and y vectors.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Involutory","page":"Builtin Matrices","title":"TypedMatrices.Involutory","text":"Involutory Matrix\n\nAn involutory matrix is a matrix that is its own inverse.\n\nInput Options\n\ndim: dim is the dimension of the matrix.\n\nReferences\n\nA. S. Householder and J. A. Carpenter, The singular values of involutory and of idempotent matrices, Numer. Math. 5 (1963), pp. 234-237, https://doi.org/10.1007/BF01385894.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Ipjfact","page":"Builtin Matrices","title":"TypedMatrices.Ipjfact","text":"Ipjfact Matrix\n\nHankel matrix with factorial elements.\n\nInput Options\n\ndim: the dimension of the matrix.\ndim, k:   k = 0 element (i, j) is factorial(i + j).   k = 1 element (i, j) is 1 / factorial(i + j).\n\nReferences\n\n**K. Habermann*, An explicit formula for the inverse of a factorial Hankel matrix, Australasian J. Comb., 79 (2021), pp. 250-255. https://ajc.maths.uq.edu.au/pdf/79/ajcv79p250.pdf\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.JordBloc","page":"Builtin Matrices","title":"TypedMatrices.JordBloc","text":"Jordan Block Matrix\n\nJordan block corresponding to the eigenvalue λ.\n\nInput Options\n\ndim: dimension of the matrix. lambda = 1.\ndim, lambda: dimension of the matrix and the lambda.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Kahan","page":"Builtin Matrices","title":"TypedMatrices.Kahan","text":"Kahan Matrix\n\nThe Kahan matrix is an upper trapezoidal matrix, i.e., the (i,j) element is equal to 0 if i > j. The useful range of θ is 0 < θ < π.\n\nThe diagonal is perturbed by pert*eps()*diagm([n:-1:1;]).\n\nInput Options\n\nrowdim, coldim, θ, pert: rowdim and coldim are the row and column   dimensions of the matrix. θ and pert are scalars.\ndim, θ, pert: dim is the dimension of the matrix.\ndim: θ = 1.2, pert = 25.\n\nReferences\n\nW. Kahan, Numerical linear algebra, Canadian Math. Bulletin, 9 (1966), pp. 757-801, https://doi.org/10.4153/CMB-1966-083-2.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.KMS","page":"Builtin Matrices","title":"TypedMatrices.KMS","text":"Kac-Murdock-Szego Toeplitz matrix\n\nInput Options\n\ndim, rho: dim is the dimension of the matrix, rho is a   scalar such that A[i,j] = rho^(abs(i-j)).\ndim: rho = 0.5.\n\nReferences\n\nW. F. Trench, Numerical solution of the eigenvalue problem for Hermitian Toeplitz matrices, SIAM J. Matrix Anal. Appl., 10 (1989), pp. 135-146, https://doi.org/10.1137/0610010.\n\nN. J. Higham, What Is the Kac-Murdock-Szegö Matrix?, https://nhigham.com/2021/07/06/what-is-the-kac-murdock-szego-matrix/\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Krylov","page":"Builtin Matrices","title":"TypedMatrices.Krylov","text":"Krylov Matrix\n\nThe basis of a Krylow subspace. The matrix has columns [x, A*x, A^2*x, ..., A^(k-1)*x].\n\nInput Options\n\ndim: dimension of the matrix. A = randn(dim, dim). x = ones(dim). k = dim.\ndim, x: dimension of the matrix and x.\ndim, x, k: dimension of the matrix, x and k.\nA: matrix. x = ones(size(A, 1)). k = size(A, 1).\nA, x: matrix and x. k = size(A, 1).\nA, x, k: matrix, x, and k.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Lauchli","page":"Builtin Matrices","title":"TypedMatrices.Lauchli","text":"Lauchli Matrix\n\nA matrix with ones on the first row, mu on the subdiagonal, and zeros elsewhere.\n\nInput Options\n\ndim: the dimension of the matrix. mu = sqrt(eps()) by default.\ndim, mu: the dimension and subdiagonal value of the matrix.\n\nReferences\n\nP. Lauchli, Jordan-Elimination und Ausgleichung nach kleinsten Quadraten, Numer. Math, 3 (1961), pp. 226-240. https://doi.org/10.1007/BF01386022\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Lehmer","page":"Builtin Matrices","title":"TypedMatrices.Lehmer","text":"Lehmer Matrix\n\nThe Lehmer matrix is a symmetric positive definite matrix. It is totally nonnegative. The inverse is tridiagonal and explicitly known.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nM. Newman and J. Todd, The evaluation of matrix inversion programs, J. Soc. Indust. Appl. Math., 6 (1958), pp. 466-476, https://doi.org/10.1137/0106030.\n\nD. H. Lehmer, Problem E710: The inverse of a matrix, Amer. Math. Monthly, 53 (1946), p. 97, https://doi.org/10.2307/2305463.\n\nSolutions by D. M. Smiley and M. F. Smiley, and by John Williamson. Amer. Math. Monthly, 53 (1946), pp. 534-535, https://doi.org/10.2307/2305078.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Leslie","page":"Builtin Matrices","title":"TypedMatrices.Leslie","text":"Leslie Matrix\n\nMatrix for birth numbers and survival rates in the Leslie population model.\n\nInput Options\n\ndim: the dimension of the matrix. x = ones(n) and y = ones(n - 1) by default.\nx, y: x and y.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Lesp","page":"Builtin Matrices","title":"TypedMatrices.Lesp","text":"Lesp Matrix\n\nA matrix with eigenvalues smoothly distributed in the interval [-2*n-3.5,-4.5].\n\nInput Options\n\ndim: the dimension of the matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Lotkin","page":"Builtin Matrices","title":"TypedMatrices.Lotkin","text":"Lotkin Matrix\n\nThe Lotkin matrix is the Hilbert matrix with its first row altered to all ones. It is ill conditioned and has many negative eigenvalues of small magnitude.\n\nInput Options\n\ndim: dim is the dimension of the matrix.\n\nReferences\n\nM. Lotkin, A set of test matrices, Math. Tables Aid Comput., 9 (1955), pp. 153-161, https://doi.org/10.2307/2002051.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Magic","page":"Builtin Matrices","title":"TypedMatrices.Magic","text":"Magic Square Matrix\n\nThe magic matrix is a matrix with integer entries such that     the row elements, column elements, diagonal elements and     anti-diagonal elements all add up to the same number.\n\nInput Options\n\ndim: the dimension of the matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Minij","page":"Builtin Matrices","title":"TypedMatrices.Minij","text":"MIN[I,J] Matrix\n\nA matrix with (i,j) entry min(i,j). It is a symmetric positive      definite matrix. The eigenvalues and eigenvectors are known      explicitly. Its inverse is tridiagonal.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nJ. Fortiana and C. M. Cuadras, A family of matrices, the discretized Brownian bridge, and distance-based regression, Linear Algebra Appl., 264 (1997), pp. 173-188, https://doi.org/10.1016/S0024-3795(97)00051-7.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Moler","page":"Builtin Matrices","title":"TypedMatrices.Moler","text":"Moler Matrix\n\nThe Moler matrix is a symmetric positive definite matrix. It has one small eigenvalue.\n\nInput Options\n\ndim, alpha: dim is the dimension of the matrix,       alpha is a scalar.\ndim: alpha = -1.\n\nReferences\n\nJ.C. Nash, Compact Numerical Methods for Computers: Linear Algebra and Function Minimisation, second edition, Adam Hilger, Bristol, 1990 (Appendix 1).\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Neumann","page":"Builtin Matrices","title":"TypedMatrices.Neumann","text":"Neumann Matrix\n\nA singular matrix from the discrete Neumann problem.        The matrix is sparse and the null space is formed by a vector of ones\n\nInput Options\n\ndim: the dimension of the matrix, must be a perfect square integer.\n\nReferences\n\nR. J. Plemmons, Regular splittings and the discrete Neumann problem, Numer. Math., 25 (1976), pp. 153-161, https://doi.org/10.1007/BF01462269.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Orthog","page":"Builtin Matrices","title":"TypedMatrices.Orthog","text":"Orthogonal Matrix\n\nOrthogonal and nearly orthogonal matrices.\n\nInput Options\n\ndim: the dimension of the matrix. k = 1 by default.\ndim, k: the dimension and type of the matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Oscillate","page":"Builtin Matrices","title":"TypedMatrices.Oscillate","text":"Oscillating Matrix\n\nA matrix A is called oscillating if A is totally     nonnegative and if there exists an integer q > 0 such that     A^q is totally positive.\n\nInput Options\n\nΣ: the singular value spectrum of the matrix.\ndim, mode: dim is the dimension of the matrix.       mode = 1: geometrically distributed singular values.       mode = 2: arithmetrically distributed singular values.\ndim: mode = 1.\n\nReferences\n\nP. C. Hansen, Test matrices for regularization methods, SIAM J. Sci. Comput., 16 (1995), pp. 506-512, https://doi.org/10.1137/0916032. .\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Parter","page":"Builtin Matrices","title":"TypedMatrices.Parter","text":"Parter Matrix\n\nThe Parter matrix is a Toeplitz and Cauchy matrix             with singular values near π.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nThe MathWorks Newsletter, Volume 1, Issue 1, March 1986, page 2.\n\nS. V. Parter, On the distribution of the singular values of Toeplitz matrices, Linear Algebra Appl., 80 (1986), pp. 115-130, https://doi.org/10.1016/0024-3795(86)90280-6.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Pascal","page":"Builtin Matrices","title":"TypedMatrices.Pascal","text":"Pascal Matrix\n\nThe Pascal matrix’s anti-diagonals form the Pascal’s triangle.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nR. Brawer and M. Pirovino, The linear algebra of     the Pascal matrix, Linear Algebra and Appl., 174 (1992),     pp. 13-23 (this paper gives a factorization of L = PASCAL(N,1)                and a formula for the elements of L^k).\n\nN. J. Higham, Accuracy and Stability of Numerical Algorithms, second edition, Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, 2002. See sect. 28.4.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Pei","page":"Builtin Matrices","title":"TypedMatrices.Pei","text":"Pei Matrix\n\nThe Pei matrix is a symmetric matrix with known inversion.\n\nInput Options\n\ndim, alpha: dim is the dimension of the matrix.   alpha is a scalar.\ndim: the dimension of the matrix.\n\nReferences\n\nM. L. Pei, A test matrix for inversion procedures, Comm. ACM, 5 (1962), p. 508, https://doi.org/10.1145/368959.368975.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Poisson","page":"Builtin Matrices","title":"TypedMatrices.Poisson","text":"Poisson Matrix\n\nA block tridiagonal matrix from Poisson's equation.      This matrix is sparse, symmetric positive definite, and      has known eigenvalues.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nG. H. Golub and C. F. Van Loan, Matrix Computations, second edition, Johns Hopkins University Press, Baltimore, Maryland, 1989. See sect. 4.5.4.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Prolate","page":"Builtin Matrices","title":"TypedMatrices.Prolate","text":"Prolate Matrix\n\nA prolate matrix is a symmetirc, ill-conditioned Toeplitz matrix.\n\nInput Options\n\ndim, alpha: dim is the dimension of the matrix. w is a real scalar.\ndim: the case when w = 0.25.\n\nReferences\n\nJ. M. Varah. The Prolate matrix. Linear Algebra Appl., 187 (1993), pp. 267-278, https://doi.org/10.1016/0024-3795(93)90142-B.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Randcolu","page":"Builtin Matrices","title":"TypedMatrices.Randcolu","text":"Randcolu Matrix\n\nRandom matrix with normalized columns and given singular values.\n\nInput Options\n\ndim: the dimension of the matrix, x will be generated randomly.\nn, m: the size of the matrix.\nn, m, k: size and k flag. Enable initial transformation if k = 0.\nx: the x vector.\nx, m: the x vector and m.\nx, m, k: the x vector, m, and k flag.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Randcorr","page":"Builtin Matrices","title":"TypedMatrices.Randcorr","text":"Random Correlation Matrix\n\nA random correlation matrix is a symmetric positive      semidefinite matrix with 1s on the diagonal.\n\nInput Options\n\ndim: the dimension of the matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Randjorth","page":"Builtin Matrices","title":"TypedMatrices.Randjorth","text":"Randjorth Matrix\n\nThis matrix is currently not implemented.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Rando","page":"Builtin Matrices","title":"TypedMatrices.Rando","text":"Random Matrix with Element -1, 0, 1\n\nInput Options\n\nrowdim, coldim, k: row_dim and col_dim are row and column dimensions,  k = 1: entries are 0 or 1.  k = 2: entries are -1 or 1.  k = 3: entries are -1, 0 or 1.\ndim, k: row_dim = col_dim = dim.\ndim: k = 1.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.RandSVD","page":"Builtin Matrices","title":"TypedMatrices.RandSVD","text":"Random Matrix with Pre-assigned Singular Values\n\nInput Options\n\nrowdim, coldim, kappa, mode: row_dim and col_dim   are the row and column dimensions. kappa is the condition number of the matrix. mode = 1: one large singular value. mode = 2: one small singular value. mode = 3: geometrically distributed singular values. mode = 4: arithmetrically distributed singular values. mode = 5: random singular values with  unif. dist. logarithm.\ndim, kappa, mode: row_dim = col_dim = dim.\ndim, kappa: mode = 3.\ndim: kappa = sqrt(1/eps()), mode = 3.\n\nReferences\n\nN. J. Higham, Accuracy and Stability of Numerical Algorithms, second edition, Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, 2002. See sect. 28.3.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Redheff","page":"Builtin Matrices","title":"TypedMatrices.Redheff","text":"Redheffer Matrix\n\nThe Redheffer matrix contains only 1s and 0s.\n\nInput Options\n\ndim: the dimension of the matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Riemann","page":"Builtin Matrices","title":"TypedMatrices.Riemann","text":"Riemann Matrix\n\nA matrix associated with the Riemann hypothesis.\n\nInput Options\n\ndim: the dimension of the matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.RIS","page":"Builtin Matrices","title":"TypedMatrices.RIS","text":"RIS Matrix\n\nThe RIS matrix has (i,j) element 0.5/(n-i-j+1.5). It is symmetric.\n\nInput Options\n\ndim: the dimension of the matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Rohess","page":"Builtin Matrices","title":"TypedMatrices.Rohess","text":"Random Orthogonal Upper Hessenberg Matrix\n\nThe matrix is constructed via a product of Givens rotations.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nW. B. Gragg, The QR algorithm for unitary Hessenberg matrices, J. Comp. Appl. Math., 16 (1986), pp. 1-8, https://doi.org/10.1016/0377-0427(86)90169-X.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Rosser","page":"Builtin Matrices","title":"TypedMatrices.Rosser","text":"Rosser Matrix\n\nThe Rosser matrix’s eigenvalues are very close together         so it is a challenging matrix for many eigenvalue algorithms.\n\nInput Options\n\ndim, a, b: dim is the dimension of the matrix.           dim must be a power of 2.           a and b are scalars. For dim = 8, a = 2 and b = 1, the generated           matrix is the test matrix used by Rosser.\ndim: a = rand(1:5), b = rand(1:5).\n\nReferences\n\nJ. B. Rosser, C. Lanczos, M. R. Hestenes, and W. Karush, Separation of close eigenvalues of a real symmetric matrix, J. Research National Bureau Standards, 47 (1951), pp. 291-297.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Sampling","page":"Builtin Matrices","title":"TypedMatrices.Sampling","text":"Matrix with Application in Sampling Theory\n\nA nonsymmetric matrix with eigenvalues 0, 1, 2, ... n-1.\n\nInput Options\n\nvec: vec is a vector with no repeated elements.\ndim: dim is the dimension of the matrix.           vec = [1:dim;]/dim.\n\nReferences\n\nL. Bondesson and I. Traat, A nonsymmetric matrix with integer eigenvalues, Linear Multilinear Algebra, 55 (2007), pp. 239-247, https://doi.org/10.1080/03081080600906455.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Smoke","page":"Builtin Matrices","title":"TypedMatrices.Smoke","text":"Smoke Matrix\n\nComplex matrix with a \"smoke ring\" pseudospectrum. The matrix has ones on the superdiagonal, and cos(w) + sin(w) * im on the diagonal. The A(n, 1)` entry is 1 if k = 0, 0 if k = 1.\n\nInput Options\n\ndim: dimension of the matrix. k = 0.\ndim, k: dimension of the matrix and the k.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Toeplitz","page":"Builtin Matrices","title":"TypedMatrices.Toeplitz","text":"Toeplitz Matrix\n\nA Toeplitz matrix is a matrix in which each descending        diagonal from left to right is constant.\n\nInput Options\n\nvc, vr: vc and vr are the first column and row of the matrix.\nv: symmatric case, i.e., vc = vr = v.\ndim: dim is the dimension of the matrix. v = [1:dim;] is the first       row and column vector.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Triw","page":"Builtin Matrices","title":"TypedMatrices.Triw","text":"Triw Matrix\n\nUpper triangular matrices discussed by Wilkinson and others.\n\nInput Options\n\nrowdim, coldim, α, k: row_dim and col_dim       are row and column dimension of the matrix. α is a       scalar representing the entries on the superdiagonals.       k is the number of superdiagonals.\ndim: the dimension of the matrix.\n\nReferences\n\nG. H. Golub and J. H. Wilkinson, Ill-conditioned eigensystems and the computation of the Jordan canonical form, SIAM Rev., 18 (1976), pp. 578-619, https://doi.org/10.1137/1018113.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Wathen","page":"Builtin Matrices","title":"TypedMatrices.Wathen","text":"Wathen Matrix\n\nThe Wathen Matrix is the consistent mass matrix of a regular nx-by-ny` grid of 8 nodes in the finite element method. The matrix is a sparse, symmetric positive definite, and has random entries.\n\nInput Options\n\n[type,] nx, ny: the dimension of the matrix is equal to   3 * nx * ny + 2 * nx * ny + 1.\n[type,] n: nx = ny = n.\n\nReferences\n\nA. J. Wathen, Realistic eigenvalue bounds for the Galerkin mass matrix, IMA J. Numer. Anal., 7 (1987), pp. 449-457, https://doi.org/10.1093/imanum/7.4.449.\n\n\n\n\n\n","category":"type"},{"location":"references/4.builtin-matrices/#TypedMatrices.Wilkinson","page":"Builtin Matrices","title":"TypedMatrices.Wilkinson","text":"Wilkinson Matrix\n\nThe Wilkinson matrix is a symmetric tridiagonal matrix with pairs of nearly equal eigenvalues. The most frequently used ordre is 21.\n\nInput Options\n\ndim: the dimension of the matrix.\n\nReferences\n\nJ. H. Wilkinson, Error analysis of direct methods of matrix inversion, J. Assoc. Comput. Mach., 8 (1961), pp. 281-330, https://doi.org/10.1145/321075.321076.\n\n\n\n\n\n","category":"type"},{"location":"manual/1.getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"manual/1.getting-started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"TypedMatrices.jl is registered in the Julia package registry, and Julia's builtin package manager can be used to install it:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"pkg> add TypedMatrices","category":"page"},{"location":"manual/1.getting-started/#Setup","page":"Getting Started","title":"Setup","text":"","category":"section"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"The first step is, as usual, to load the package:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"using TypedMatrices","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"The list of available matrices can be obtained with list_matrices:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"matrix_list = list_matrices()","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"The function returns a Vector of matrix types, which are subtypes of AbstractMatrix. The elements of this Vector can be used to generate matrices:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"matrix_list[1](4)","category":"page"},{"location":"manual/1.getting-started/#Generating-Matrices","page":"Getting Started","title":"Generating Matrices","text":"","category":"section"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"Each type of special matrices has its own type and constructors. For example, a 5 × 5 Hilbert matrix can be generated with:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"h = Hilbert(5)","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"Most matrices can accept a type parameter to specify the element type. For example, a 5 × 5 Hilbert matrix with Float64 elements can be generated with:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"Hilbert{Float64}(5)","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"Please check the list of Builtin Matrices for an overview of all available types.","category":"page"},{"location":"manual/1.getting-started/#Properties","page":"Getting Started","title":"Properties","text":"","category":"section"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"Matrices have properties such as \"symmetric\", \"ill conditioned\", or \"positive definite\".","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"The function list_properties can be used to show all properties currently defined in TypedMatrices.jl:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"list_properties()","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"The function properties can used to get the properties of a given matrix type:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"properties(Hilbert)","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"For convenience, the same function can be used to list the properties of a matrix instance, rather than a type:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"properties(h)","category":"page"},{"location":"manual/1.getting-started/#Grouping","page":"Getting Started","title":"Grouping","text":"","category":"section"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"Matrices can be organized by creating user-defined groups. All builtin matrices belong to the :builtin group, and the package comes with an empty :user group for user-defined matrices. All available groups can be listed with:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"list_groups()","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"The function add_to_groups can be used to add a matrix to a group:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"add_to_groups(Matrix, :user, :test)","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"The function list_matrices can be used to list the matrices that belong to a chosen group:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"list_matrices(Group(:user))","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"Builtin matrices can also be added to a group:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"add_to_groups(Hilbert, :test)\nlist_matrices(Group(:test))","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"A matrix can be removed:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"from a specific group, with remove_from_group, or\nfrom all groups, with remove_from_all_groups.","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"Matrices cannot be removed from the :builtin group, and user-defined groups are automatically removed when they become empty:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"remove_from_group(Hilbert, :test)\nremove_from_all_groups(Matrix)\nlist_groups()","category":"page"},{"location":"manual/1.getting-started/#Finding-Matrices","page":"Getting Started","title":"Finding Matrices","text":"","category":"section"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"list_matrices is a powerful function to search for matrices, and filter the results by groups or properties. All arguments are \"and\" relationship, meaning that only matrices that satisfy all conditions will be retained.","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"For example, one can list all the matrices in the :builtin group, or all those that are satisfy the :symmetric property:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"list_matrices(Group(:builtin))\nlist_matrices(Property(:symmetric))","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"One can also combine the two filters and show all matrices in the :builtin group that satisfy the :inverse, :illcond, and :eigen properties:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"list_matrices(\n    [\n        Group(:builtin),\n    ],\n    [\n        Property(:inverse),\n        Property(:illcond),\n        Property(:eigen),\n    ]\n)","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"A simpler syntax can be used to list all matrices that satisfy a list of properties. For example, all matrices with :symmetric, :eigen, and :posdef can be listed with:","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"list_matrices(:symmetric, :eigen, :posdef)","category":"page"},{"location":"manual/1.getting-started/","page":"Getting Started","title":"Getting Started","text":"The list_matrices functions provides a number of alternative interfaces. Check the full documentation of list_matrices or use the Julia help system for a complete list.","category":"page"},{"location":"references/1.types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"references/1.types/#TypedMatrices.PropertyTypes","page":"Types","title":"TypedMatrices.PropertyTypes","text":"PropertyTypes\n\nTypes of properties.\n\nSee also TypedMatrices.Property, TypedMatrices.list_properties.\n\nExamples\n\njulia> PropertyTypes.Symmetric\nTypedMatrices.PropertyTypes.Symmetric\n\n\n\n\n\n","category":"module"},{"location":"references/1.types/#TypedMatrices.Property","page":"Types","title":"TypedMatrices.Property","text":"Property\n\nProperty type. Similar to symbol, just to distinguish it from group.\n\nSee also list_properties, @properties, properties.\n\n\n\n\n\n","category":"type"},{"location":"references/1.types/#TypedMatrices.Group","page":"Types","title":"TypedMatrices.Group","text":"Group\n\nGroup type. Similar to symbol, just to distinguish it from property.\n\nSee also list_matrices, list_groups, add_to_groups, remove_from_group, remove_from_all_groups.\n\n\n\n\n\n","category":"type"},{"location":"manual/3.testing-algorithms/#Testing-Algorithms","page":"Testing Algorithms","title":"Testing Algorithms","text":"","category":"section"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"This section presents a standardized methodology for testing algorithms using the TypedMatrices package.","category":"page"},{"location":"manual/3.testing-algorithms/#Algorithm-Development","page":"Testing Algorithms","title":"Algorithm Development","text":"","category":"section"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"Consider, for example, a simple algorithm that computes the sum of all elements in a matrix. This algorithm is implemented in the function sum_elements as follows:","category":"page"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"function sum_elements(A::AbstractMatrix)\n    return sum(A)\nend","category":"page"},{"location":"manual/3.testing-algorithms/#Algorithm-Testing","page":"Testing Algorithms","title":"Algorithm Testing","text":"","category":"section"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"To test the algorithm, use the test_algorithm function. This function accepts the algorithm as its first argument and a vector of matrix sizes as its second argument. Additionally, it supports optional arguments to specify matrix properties and error handling behavior.","category":"page"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"For example, to test the sum_elements algorithm on symmetric and positive definite matrices of sizes 1 through 4, with known eigenvalues and inverse, one can invoke the following:","category":"page"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"test_algorithm(\n    sum_elements,\n    [1, 2, 3, 4],\n    props=[\n        Property(:symmetric), Property(:posdef),\n        Property(:eigen), Property(:inverse)\n    ],\n    errors_as_warnings=true\n)","category":"page"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"In this example, the first two arguments specify the target algorithm and the set of matrix sizes to test, respectively. The props keyword argument defines the properties of matrices. The errors_as_warnings flag determines whether runtime errors should be reported as warnings instead of causing test failure.","category":"page"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"The function returns a vector of tuples, each containing three elements: the matrix type, the matrix size, and the corresponding output from the algorithm under test.","category":"page"},{"location":"manual/3.testing-algorithms/#Testing-Using-Groups","page":"Testing Algorithms","title":"Testing Using Groups","text":"","category":"section"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"If you already have predefined groups of matrices and would like to test your algorithm on them, you can pass them to the groups keyword argument, similar to how it's done with the list_matrices function.","category":"page"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"add_to_groups(Cauchy, :test)\nadd_to_groups(Hilbert, :test)\ntest_algorithm(\n    sum_elements,\n    [1, 2, 3, 4],\n    groups=[Group(:test)],\n)","category":"page"},{"location":"manual/3.testing-algorithms/#Performance-and-Memory-Profiling","page":"Testing Algorithms","title":"Performance and Memory Profiling","text":"","category":"section"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"In many cases, it is desirable to capture performance metrics such as execution time and memory allocation alongside the algorithm’s output. To facilitate this, the algorithm can be modified accordingly:","category":"page"},{"location":"manual/3.testing-algorithms/","page":"Testing Algorithms","title":"Testing Algorithms","text":"function sum_elements(A::AbstractMatrix)\n    result = @timed sum(A)\n    return result.value, result.time, result.bytes\nend\n\ntest_algorithm(\n    sum_elements,\n    [1, 2, 3, 4],\n    props=[\n        Property(:symmetric), Property(:posdef),\n        Property(:eigen), Property(:inverse)\n    ],\n    errors_as_warnings=true\n)","category":"page"},{"location":"#TypedMatrices.jl","page":"Home","title":"TypedMatrices.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation of TypedMatrices.jl, an extensible matrix collection for Julia. The matrices in the library can be used to test algorithms or check (and potentially disprove) linear algebra conjectures numerically.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package relies on the Julia type system to enhance performance by improving the matrix generation time and reducing storage requirements.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To get started, check out the Getting Started section.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each special matrix has its own Julia type, and users can define new types compatible with the package using the interface provided.\nMany linear algebra operations are implemented using explicit formulas, when known, to enhance performance.\nThe matrices in the collection can be filtered by property, to find examples that satisfy a set of properties of interest.\nUsers can create matrix groups to retrieve and organize the types in the collection.","category":"page"},{"location":"references/2.interfaces/#Interfaces","page":"Interfaces","title":"Interfaces","text":"","category":"section"},{"location":"references/2.interfaces/#Matrices","page":"Interfaces","title":"Matrices","text":"","category":"section"},{"location":"references/2.interfaces/#TypedMatrices.list_matrices","page":"Interfaces","title":"TypedMatrices.list_matrices","text":"list_matrices(groups, props)\n\nList all matrices that are in groups and have properties.\n\ngroups can be vector/varargs of Group or symbol.\n\nprops can be vector/varargs of Property, symbol, subtype of PropertyTypes.AbstractProperty or instance of AbstractProperty.\n\nExamples\n\njulia> list_matrices()\n\njulia> list_matrices([Group(:builtin), Group(:user)], [Property(:symmetric), Property(:inverse)])\n\njulia> list_matrices(Property(:symmetric), Property(:inverse))\n\njulia> list_matrices([Property(:symmetric), Property(:inverse)])\n\njulia> list_matrices(:symmetric, :inverse)\n\njulia> list_matrices([:symmetric, :inverse])\n\njulia> list_matrices(PropertyTypes.Symmetric, PropertyTypes.Inverse)\n\njulia> list_matrices([PropertyTypes.Symmetric, PropertyTypes.Inverse])\n\njulia> list_matrices(PropertyTypes.Symmetric(), PropertyTypes.Inverse())\n\njulia> list_matrices([PropertyTypes.Symmetric(), PropertyTypes.Inverse()])\n\njulia> list_matrices(Group(:builtin), Group(:user))\n\njulia> list_matrices([Group(:builtin), Group(:user)])\n\n\n\n\n\n","category":"function"},{"location":"references/2.interfaces/#Properties","page":"Interfaces","title":"Properties","text":"","category":"section"},{"location":"references/2.interfaces/#TypedMatrices.list_properties","page":"Interfaces","title":"TypedMatrices.list_properties","text":"list_properties()\n\nList all properties.\n\n\n\n\n\n","category":"function"},{"location":"references/2.interfaces/#TypedMatrices.@properties","page":"Interfaces","title":"TypedMatrices.@properties","text":"@properties Type [propa, propb, ...]\n\nRegister properties for a type. The properties are a vector of symbols.\n\nSee also: properties.\n\nExamples\n\njulia> @properties Matrix [:symmetric, :inverse, :illcond, :posdef, :eigen]\n\n\n\n\n\n","category":"macro"},{"location":"references/2.interfaces/#TypedMatrices.properties","page":"Interfaces","title":"TypedMatrices.properties","text":"properties(type)\nproperties(matrix)\n\nGet the properties of a type or matrix.\n\nSee also: @properties.\n\nExamples\n\njulia> @properties Matrix [:symmetric, :posdef]\n\njulia> properties(Matrix)\n2-element Vector{Property}:\n Property(:symmetric)\n Property(:posdef)\n\njulia> properties(Matrix(ones(1, 1)))\n2-element Vector{Property}:\n Property(:symmetric)\n Property(:posdef)\n\n\n\n\n\n","category":"function"},{"location":"references/2.interfaces/#Grouping","page":"Interfaces","title":"Grouping","text":"","category":"section"},{"location":"references/2.interfaces/#TypedMatrices.list_groups","page":"Interfaces","title":"TypedMatrices.list_groups","text":"list_groups()\n\nList all matrix groups.\n\n\n\n\n\n","category":"function"},{"location":"references/2.interfaces/#TypedMatrices.add_to_groups","page":"Interfaces","title":"TypedMatrices.add_to_groups","text":"add_to_groups(type, groups)\n\nAdd a matrix type to groups. If a group does not exist, it will be created.\n\nGroups :builtin and :user are special groups. It is suggested always to add matrices to the :user group.\n\ngroups can be vector/varargs of Group or symbol.\n\nSee also remove_from_group, remove_from_all_groups.\n\nExamples\n\njulia> add_to_groups(Matrix, [Group(:user), Group(:test)])\n\njulia> add_to_groups(Matrix, Group(:user), Group(:test))\n\njulia> add_to_groups(Matrix, [:user, :test])\n\njulia> add_to_groups(Matrix, :user, :test)\n\n\n\n\n\n","category":"function"},{"location":"references/2.interfaces/#TypedMatrices.remove_from_group","page":"Interfaces","title":"TypedMatrices.remove_from_group","text":"remove_from_group(type, group)\n\nRemove a matrix type from a group. If the group is empty, it will be deleted.\n\ngroup can be Group or symbol.\n\nSee also add_to_groups, remove_from_all_groups.\n\nExamples\n\njulia> add_to_groups(Matrix, Group(:user))\n\njulia> remove_from_group(Matrix, Group(:user))\n\njulia> add_to_groups(Matrix, :user)\n\njulia> remove_from_group(Matrix, :user)\n\n\n\n\n\n","category":"function"},{"location":"references/2.interfaces/#TypedMatrices.remove_from_all_groups","page":"Interfaces","title":"TypedMatrices.remove_from_all_groups","text":"remove_from_all_groups(type)\n\nRemove a matrix type from all groups. If a group is empty, it will be deleted.\n\nSee also add_to_groups, remove_from_group.\n\nExamples\n\njulia> remove_from_all_groups(Matrix)\n\n\n\n\n\n","category":"function"},{"location":"references/2.interfaces/#TypedMatrices.save_group","page":"Interfaces","title":"TypedMatrices.save_group","text":"save_group(group, file_name)\n\nSave matrices to a group.\n\ngroup can be Group or symbol.\n\nSee also load_group.\n\nExamples\n\njulia> save_group(Group(:user), \"user_matrices.txt\")\n\njulia> save_group(:user, \"user_matrices.txt\")\n\n\n\n\n\n","category":"function"},{"location":"references/2.interfaces/#TypedMatrices.load_group","page":"Interfaces","title":"TypedMatrices.load_group","text":"load_group(group, file_name)\n\nLoad matrices to a group.\n\ngroup can be Group or symbol.\n\nSee also save_group.\n\nExamples\n\njulia> load_group(Group(:user), \"user_matrices.txt\")\n\njulia> load_group(:user, \"user_matrices.txt\")\n\n\n\n\n\n","category":"function"},{"location":"references/2.interfaces/#Testing-Interfaces","page":"Interfaces","title":"Testing Interfaces","text":"","category":"section"},{"location":"references/2.interfaces/#TypedMatrices.test_algorithm","page":"Interfaces","title":"TypedMatrices.test_algorithm","text":"test_algorithm(func, sizes, props, errors_as_warnings=false, ignore_errors=false, excludes=[])\n\nTest an algorithm with all matrix types and sizes.\n\nArguments\n\nfunc::Function: The function to test, which accepts a matrix as input.\nsizes::Vector{<:Integer}: The sizes to test.\ngroups::Vector{Group}=Group[]: The groups to find matrices.\nprops::Vector{Property}=Property[]: The properties to find matrices.\nerrors_as_warnings::Bool=false: If true, errors will be shown as warnings.\nignore_errors::Bool=false: If true, errors will be ignored.\nexcludes::Vector=[]: The matrix types to exclude.\n\nThe errors_as_warnings and ignore_errors options can be true at the same time. In this case, errors will be ignored.\n\n\n\n\n\n","category":"function"}]
}
